name: Klant Service

on:
  push:
    branches: [ master ]
    # paths: 
    # - src/KlantService/**
  pull_request:
    branches: [ master ]
    paths: 
    - src/KlantService/**

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup dotnet
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.4.0
#       with:
#         # SDK version to use. Example: 2.2.104
#         dotnet-version: '3.1.x'

    # Publish project
    - name: Dotnet Publish
      run: dotnet publish src/KlantService/KlantService -c Release -o src/KlantService/KlantService/obj/docker/publish

    # Docker build and publish
    - name: Build and push Docker image
      uses: docker/build-push-action@v1.1.0
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: djja
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.DOCKERHUBTOKEN }}
        # Docker repository to tag the image with
        repository: djja/fit-klantservice
        # Path to the build context
        path: src/KlantService/KlantService
        # Path to the Dockerfile (Default is '{path}/Dockerfile')
        dockerfile: src/KlantService/KlantService/dockerfile
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        # tags: latest
        # Automatically tags the built image with the git reference as per the readme
        tag_with_ref: true
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: true

  deploy:
    name: Deploy on Kubernetes cluster
    runs-on: ubuntu-latest
    # needs: build
    env:
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2

      - name: Set Short SHA Environment Variable
        run: echo "::set-env name=SHORT_SHA::${GITHUB_SHA::7}"

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          # Acceptable values: kubeconfig or service-account
          # method: # default is kubeconfig
          # Kubernetes Config
          kubeconfig: ${{ secrets.KUBECONFIG }}
          # If your kubeconfig has multiple contexts, use this field to use a specific context, otherwise the default one would be chosen
          # context: # optional, default is 
          # Cluster Url
          # k8s-url: # optional, default is 
          # Service account secret. Run kubectl get serviceaccounts <service-account-name> -o yaml and copy the service-account-secret-name. Copy the ouptut of kubectl get secret <service-account-secret-name> -o yaml
          # k8s-secret: # optional, default is 
      
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          namespace: fit
          # Path to the manifest files which will be used for deployment.
          manifests: |
            common/deployment/manifests/KlantService/deployment.yaml
            common/deployment/manifests/KlantService/service.yaml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: djja/fit-klantservice:sha-${{ jobs.deploy.env.SHORT_SHA }}
          
          
